quarkus.application.name=superheroes-villains-service
## HTTP configuration
quarkus.http.port=8084
quarkus.jackson.serialization-inclusion=non-empty
# drop and create the database at startup (use `update` to only update the schema or 'validate' to only validate the schema)
quarkus.hibernate-orm.database.generation=drop-and-create
# Villain service specific properties (see VillainConfig)
villain.level.multiplier=0.5
%test.villain.level.multiplier=1
## Logging configuration
quarkus.log.category."io.quarkus.sample.superheroes".level=DEBUG
quarkus.log.level=INFO
%dev.quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
%test.quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=INFO
quarkus.log.console.darken=1
%dev.quarkus.log.console.level=DEBUG
%test.quarkus.log.console.level=DEBUG
# OpenTelemetry
quarkus.otel.resource.attributes=app=${quarkus.application.name},application=villains-service,system=quarkus-super-heroes
quarkus.otel.exporter.otlp.traces.endpoint=http://otel-collector:4317
quarkus.datasource.jdbc.telemetry=true
## CORS
quarkus.http.cors=true
quarkus.http.cors.origins=*
# prod configuration
%prod.quarkus.hibernate-orm.sql-load-script=import.sql
# OpenAPI
quarkus.smallrye-openapi.info-title=Villain API
quarkus.smallrye-openapi.info-description=This API allows CRUD operations on a villain
quarkus.smallrye-openapi.info-version=1.0
quarkus.swagger-ui.always-include=true