services:
  villains-service:
    build:
      context: ../villains-service
      dockerfile: src/main/docker/Dockerfile.jvm
    container_name: 'villains-service'
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - '8084:8084'
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/villains_database
      QUARKUS_HIBERNATE_ORM_DATABASE_GENERATION: drop-and-create
      QUARKUS_DATASOURCE_USERNAME: superbad
      QUARKUS_DATASOURCE_PASSWORD: superbad
      QUARKUS_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://otel-collector:4317

  heroes-service:
    build:
      context: ../heroes-service
      dockerfile: src/main/docker/Dockerfile.jvm
    container_name: 'heroes-service'
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - '8083:8083'
    environment:
      QUARKUS_DATASOURCE_REACTIVE_URL: postgresql://postgres:5432/heroes_database
      QUARKUS_HIBERNATE_ORM_DATABASE_GENERATION: drop-and-create
      QUARKUS_DATASOURCE_USERNAME: superman
      QUARKUS_DATASOURCE_PASSWORD: superman
      QUARKUS_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://otel-collector:4317

  fights-service:
    build:
      context: ../fights-service
      dockerfile: src/main/docker/Dockerfile.jvm
    container_name: 'fights-service'
    depends_on:
      - villains-service
      - heroes-service
      - kafka
      - mongodb
      - apicurio
    ports:
      - '8082:8082'
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/fights_database
      QUARKUS_MONGODB_HOSTS: mongodb:27017
      KAFKA_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      QUARKUS_LIQUIBASE_MONGODB_MIGRATE_AT_START: "false"
      QUARKUS_MONGODB_CREDENTIALS_USERNAME: superfight
      QUARKUS_MONGODB_CREDENTIALS_PASSWORD: superfight
      QUARKUS_REST_CLIENT_HERO_CLIENT_URL: http://heroes-service:8083
      FIGHT_VILLAIN_CLIENT_BASE_URL: http://villains-service:8084
      MP_MESSAGING_CONNECTOR_SMALLRYE_KAFKA_APICURIO_REGISTRY_URL: http://apicurio:8086/apis/registry/v2
      QUARKUS_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://otel-collector:4317

  event-statistics-service:
    build:
      context: ../event-statistics-service
      dockerfile: src/main/docker/Dockerfile.jvm
    container_name: 'event-statistics-service'
    depends_on:
      - kafka
      - apicurio
    ports:
      - '8085:8085'
    environment:
      KAFKA_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      MP_MESSAGING_CONNECTOR_SMALLRYE_KAFKA_APICURIO_REGISTRY_URL: http://apicurio:8086/apis/registry/v2
      QUARKUS_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://otel-collector:4317

  battle-ui:
    build:
      context: ../battle-ui
      dockerfile: src/main/docker/Dockerfile.jvm
    container_name: 'battle-ui'
    depends_on:
      - fights-service
    ports:
      - '8080:8080'
    environment:
      API_BASE_URL: http://localhost:8082

  postgres:
    image: postgres:14.9
    container_name: 'super-postgres'
    ports:
      - '5433:5432'
    environment:
      POSTGRES_PASSWORD: password
    volumes:
      - ./db-init/initialize-databases.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U postgres' ]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:3.5.1
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER

  mongodb:
    image: mongo:7.0.2
    container_name: mongodb
    ports:
      - 27017
    environment:
      MONGO_INITDB_DATABASE: fights
      MONGO_INITDB_ROOT_USERNAME: super
      MONGO_INITDB_ROOT_PASSWORD: super
    volumes:
      - ./db-init/initialize-database.js:/docker-entrypoint-initdb.d/1-init-db.js

  apicurio:
    image: apicurio/apicurio-registry-mem:2.4.12.Final
    container_name: apicurio
    ports:
      - '8086:8080'
    environment:
      REGISTRY_AUTH_ANONYMOUS_READ_ACCESS_ENABLED: 'true'

  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - 9090:9090
    container_name: super-visor
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml

  jaeger:
    image: jaegertracing/all-in-one:1
    container_name: jaeger
    ports:
      - '16686:16686' # Jaeger UI
      - '14268'       # Accept thrift spans
      - '14250'       # Accept gRPC spans

  otel-collector:
    image: otel/opentelemetry-collector:0.75.0
    container_name: otel-collector
    command:
      - "--config=/conf/otel-collector-config.yml"
    volumes:
      - ./monitoring/otel-collector-config.yml:/conf/otel-collector-config.yml
    ports:
      - '13133:13133' # health_check extension
      - '4317:4317'   # OTLP gRPC receiver
    depends_on:
      - jaeger